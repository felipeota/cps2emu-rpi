include config.mk

RM     = rm -f
RMDIR  = rm -rf
MKDIR  = mkdir -p

GCC=gcc
GPP=g++

CC     = $(CROSS_COMPILE)$(GCC)
CPP    = $(CROSS_COMPILE)$(GPP)
AS     = $(CROSS_COMPILE)$(GPP)
STRIP  = $(CROSS_COMPILE)strip
LD     = $(CROSS_COMPILE)$(GCC)

PROG   = cps2emu 
ROMCNV = cps2romcnv
GUI    = cps2gui

QMAKE  = qmake-qt4
MAKE   = make
GUI_DIR = cps2gui/


#CFLAGS = -mcpu=arm920 -mtune=arm920t -DN900 
#CFLAGS = -march=armv7-a -mcpu=cortex-a8 -mtune=cortex-a8 -DN900
CFLAGS = -O3 -mcpu=arm1176jzf-s -mtune=arm1176jzf-s -marm -mfloat-abi=hard -mfpu=vfp -ftree-vectorize -fomit-frame-pointer -fsigned-char -marm -DALIGN_INTS -DALIGN_SHORTS -DLSB_FIRST -DN900
CFLAGS += -ffast-math -fstrict-aliasing -fexpensive-optimizations 
CFLAGS += -fweb -frename-registers -fomit-frame-pointer -fno-short-enums 
CFLAGS += -falign-functions=32 -falign-loops -falign-labels -falign-jumps 
CFLAGS += -finline -finline-functions -fno-builtin -fno-common -floop-optimize 
CFLAGS += -Isrc -Isrc/cps2 
CFLAGS += -I$(SYS_ROOT)/usr/include -I$(SYS_ROOT)/usr/include/arm-linux-gnueabihf/

LDFLAGS = --verbose -L$(SYS_ROOT)/usr/lib/arm-linux-gnueabihf/ -L$(SYS_ROOT)/lib/arm-linux-gnueabihf/ -Wl,-rpath-link,$(SYS_ROOT)/usr/lib/arm-linux-gnueabihf/ -Wl,-rpath-link,$(SYS_ROOT)/lib/arm-linux-gnueabihf/ -Wl,-rpath-link,$(SYS_ROOT)/usr/lib/arm-linux-gnueabihf/pulseaudio/ --sysroot $(SYS_ROOT)/ -lSDL -lz -lpthread

SUBDIRS = .

OBJ  = static/emumain.o static/emudraw.o static/draw_arm.o static/usbjoy.o static/font.o static/memset.o static/memcpy.o \
        static/zip/unzip.o static/zip/zfile.o static/sound/qsound.o static/sound/sndintrf.o static/cps2/cache.o \
	static/cps2/cps2.o static/cps2/cps2crpt.o static/cps2/driver.o static/cps2/eeprom.o static/cps2/inptport.o \
	static/cps2/memintrf.o static/cps2/sprite.o static/cps2/state.o static/cps2/timer.o \
	static/cps2/vidhrdw.o static/cps2/loadrom.o static/cps2/coin.o static/cps2/hiscore.o \
	static/cpu/cyclone/Cyclone.o static/cpu/cyclone/m68000.o static/cpu/drz80/DrZ80.o static/cpu/drz80/z80.o \
	static/maemo.o
# static/cpu/cyclone/Cyclone.o
# static/cpu/cyclone/m68000.o
# static/cpu/z80/z80.o static/cpu/z80/cz80.o 
# static/cpu/m68000/c68k.o static/cpu/m68000/m68000.o static/cpu/m68000/c68kexec.o
# static/cpu/z80/z80.o static/cpu/z80/cz80.o
# static/cpu/m68000/c68k_ini.o static/cpu/m68000/c68k_op.o

ROMCNV_OBJ = obj/romcnv.o obj/unzip.o obj/zfile.o

all: all-before $(PROG) $(ROMCNV)


all-before:
	$(MKDIR) "static"
	$(MKDIR) "static/zip"
	$(MKDIR) "static/sound"
	$(MKDIR) "static/cps2"
	$(MKDIR) "static/cpu/cyclone"
	$(MKDIR) "static/cpu/drz80"	
	$(MKDIR) "static/cpu/m68000"
	$(MKDIR) "static/cpu/z80"
	$(MKDIR) "obj"

clean:
	$(RMDIR) "static"
	$(RMDIR) "obj"
	$(RM) $(PROG)
	$(RM) $(ROMCNV)
	$(RM) $(GUI_DIR)$(GUI)
	cd $(GUI_DIR); $(MAKE) clean
	$(RM) $(GUI_DIR)Makefile
	
$(PROG): $(OBJ)
	$(LD) $(OBJ) $(CFLAGS) -o $@ $(LDFLAGS)
	$(STRIP) $@

$(ROMCNV):$(ROMCNV_OBJ)
	$(LD) $(ROMCNV_OBJ) $(CFLAGS) -o $@ $(LDFLAGS)
	$(STRIP) $@

static/%.o:	src/%.c
	$(CC) $(INCLUDES) -c $(CFLAGS) $< -o $@

static/%.o:	src/%.s
	$(CC) $(INCLUDES) -c $(CFLAGS) $< -o $@

static/%.o:	src/%.S
	$(AS) $(INCLUDES) -c $(CFLAGS) $< -o $@

obj/%.o:	src/%.c
	$(CC) $(INCLUDES) -c $(CFLAGS) $< -o $@

flook-in:
	true
